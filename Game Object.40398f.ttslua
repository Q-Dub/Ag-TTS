function onLoad(save_state)
  --self.interactable = false
end

function copyTable(params)
	-- tables returned from external objects are protected from access, so need to copy them
  local table = params.table
  local k, v
	local copy = {}

	for k, v in pairs(table) do
			copy[k] = v
	end

	return copy
end

function copyValue(params)
  -- lua always passes by reference, hence this nonsense
  local copy = params.value
  return copy
end

function deepTableCopy(obj, seen)
  -- Handle non-tables and previously-seen tables.
  if type(obj) ~= 'table' then return obj end
  if seen and seen[obj] then return seen[obj] end

  -- New table; mark it as seen an copy recursively.
  local s = seen or {}
  local res = setmetatable({}, getmetatable(obj))
  s[obj] = res
  for k, v in pairs(obj) do res[deepCopy(k, s)] = deepCopy(v, s) end
  return res
end

function dumpTable(params)
  local table = params.table
  local maxFields = params.maxFields or 0 -- default to 0, meaning show all
  local iteration = params.iteration or 1

  if( table == nil) then
    log('Game.dumpTable Table is empty, exiting!')
    return nil
  end

  if( type(table) ~= 'table' ) then
    log('Game.dumpTable: not a table! (' .. type(table) .. ')')
    return
  end

  if(iteration == 1) then
    log('* * * * * TABLE DUMP * * * * *')
  end

  local keyCounter = 1
  local key, value
  for key, value in pairs(table) do
    if( type(value) == 'table' ) then
      log('key: ' .. key)
      log('=== value is a table ===')
      iteration = iteration + 1
      keyCounter = keyCounter + 1
      dumpTable({ table = value, maxFields = maxFields, iteration = iteration } )
    else
      if( (maxFields == 0) or (keyCounter < maxFields) ) then
        log("key: ")
        if(key == nil) then
          log('nil')
        else
          log(key)
        end

        log("value:")
        if(value == nil) then
          log('nil')
        else
          log(value)
        end
        keyCounter = keyCounter + 1
      else
        log('warning: maxFields reached, skipping rest')
        break
      end
    end
  end
end

function inTable(params)
  -- works recursively

  local table = params.table
  local searchValue = params.searchValue
  local found = false

  -- return false if table is nil
  if(table == nil) then return false end

  --log('searching for value: ' .. searchValue)
  --log(table)
  local k, v
  for k, v in pairs(table) do
    --log('parsing value: ' .. v)
    if(type(v) == 'table') then
      found = inTable( { table = v, searchValue = searchValue } )
      return found
    elseif(v == searchValue) then
      --log('match found!')
      return true
    end
  end

  return false
end

function deleteInTable(params)
  -- delete all occurances of a given value within a table
  -- works recursively
  local t = params.table
  local searchValue = params.searchValue

  -- return false if table is nil
  if(t == nil) then return nil end

  local k, v
  --log('searching for value: ' .. searchValue)
  for k, v in pairs(t) do
    --log('parsing value: ' .. v)
    if( type(v) == 'table') then
      v = deleteInTable( { table = v, searchValue = searchValue } )
      t[k] = v
    elseif( v == searchValue ) then
      table.remove(t, k)
    end
  end

  return t
end

function removeIndex(params)
	-- apparently sometimes table.remove doesn't work!
	local table = params.table
	local index = params.index
	local newTable = {}

	local key, value
  local newIndex = 1
	for key, value in ipairs(table) do
		if(key ~= index) then
			newTable[newIndex] = value
      newIndex = newIndex + 1
		end
	end
	return newTable
end

function tableSize(params)
  -- # operator only works for iTables
  local key
  local count = 0
  for key in pairs(params.table) do
    count = count + 1
  end

  return count
end

function destroyGUIDList(table)
  if(table == nil) then return false end

  local guid, obj
  for _, guid in pairs(table) do
    --log('getting guid: ' .. guid)
    obj = getObjectFromGUID(guid)
    obj.destruct()
  end
end

function playerSnapshot()
  -- take a snapshot at game start of the player colors, so things will still work if they are temp. disconnected
  local inGame = {} -- returned table of colors in this game at present moment
  local i, color
  local availableColors = Player.getAvailableColors()

  for i, color in pairs(availableColors) do
    if( Player[color].seated ) then
      -- for some reason getAvailableColors() returns each color thrice, so ensure no duplicates
      if( inTable({table = inGame, searchValue = color}) == false ) then
        table.insert(inGame, color)
      end
    end
  end
  return inGame
end

function randomizeSeats()
	local availableColors = Player.getAvailableColors()
	local randomizedPositions = {}
	local numColors = #availableColors
end

function matchTableKeyOrder(params)
	-- returns a table whose keys are sorted into the order of a second tables keys
  local unorderedTable = params.unorderedTable
  local orderedTable = params.orderedTable
  local badParams = 0
  if(unorderedTable == nil) then
    log('Game.matchTableKeyOrder: unorderedTable is nil')
    badParams = 1
  elseif(orderedTable == nil) then
    log('Game.matchTableKeyOrder: orderedTable is nil')
    badParams = 1
  end
  if(badParams == 1) then return end

	local sortedTable = {}
	local key, k, v
  local foundMatch = 0

	for key in pairs(orderedTable) do
    --log('looking for  ' .. key)
    for k, v in ipairs(unorderedTable) do
      if( unorderedTable[k] == key ) then
  			--log('found key' .. key)
  			table.insert(sortedTable, key)
  		end
    end
	end

	return(sortedTable)
end

function reverseArray(tbl)
  for i=1, math.floor(#tbl / 2) do
    local tmp = tbl[i]
    tbl[i] = tbl[#tbl - i + 1]
    tbl[#tbl - i + 1] = tmp
  end
end

function vectorMath(params)
  -- params = table1, table2, operator
  -- receive two tables, return the first one modified by any matching keys in the second one
  -- allowed operations: '+', '-', '*', '/', '%'
  local t1 = params.t1
  local t2 = params.t2
  local operator = params.operator

  -- check legit operator

  if( type(t1) ~= 'table' ) then log( 'Game.vectorMath: parameter one is not a table! ' .. type(t1) ) return end
  if( type(t2) ~= 'table' ) then log( 'Game.vectorMath: parameter two is not a table! ' .. type(t2) ) return end

  -- check if either table is empty, return other table if so
  if( #t1 == 0 ) then return t2 end
  if( #t2 == 0 ) then return t1 end

  --match as many keys as we can, and perform given operation
  local key, value
  local returnVector = {}
  for key, value in pairs(t1) do
    if( t2[key] == nil ) then
      -- map x,y,z, even if not in second table
      if( key == 'x' ) then t2[key] = t2[1]
      elseif( key == 'y' ) then t2[key] = t2[2]
      elseif( key == 'z' ) then t2[key] = t2[3]
      else
        returnVector[key] = value
      end
    end

    -- test again, with x,y,z added
    if( t2[key] ~= nil ) then
      if    ( operator == '+' ) then returnVector[key] = value + t2[key]
      elseif( operator == '-' ) then returnVector[key] = value - t2[key]
      elseif( operator == '*' ) then returnVector[key] = value * t2[key]
      elseif( operator == '/' ) then returnVector[key] = value / t2[key]
      elseif( operator == '%' ) then returnVector[key] = value % t2[key]
      else log('Game.vectorMath: ILLEGAL OPERATOR!') return t1 end
    end
    --log('=========== set returnVector[' .. key .. '] to ' .. returnVector[key])
  end
  --log('TABLE 1 DUMP * * * ')
  --dumpTable(t1)

  --log('TABLE 2 DUMP * * * ')
  --dumpTable(t2)
  return returnVector
end

function vectorNumberToLetter(number)
	if(number == 1) then return 'x'
	elseif(number == 2) then return 'y'
	elseif(number == 3) then return 'z'
	else return nil end
end

function waitFrames(frames)
  while frames > 0 do
      coroutine.yield(0)
      frames = frames - 1
  end
end

function deal(params)
  local stack = params.stack
	local numCards = params.numCards
	local targetGUIDs = params.targetGUIDs

	for _, guid in pairs(targetGUIDs) do
		local target = getObjectFromGUID(guid)
		local targetPosition = target.getPosition()
		--targetPosition.x = tostring( tonumber(targetPosition.x) + (counter * 0.1) )
		local targetRotation = target.getRotation()
		targetRotation.y = targetRotation.y + 180
		local j
		for j = 1, numCards do
			--targetPosition.x = targetPosition.x + (j * 0.1)
			targetPosition.y = targetPosition.y + (j/50)
			stack.takeObject({position = targetPosition, rotation = targetRotation})
		end
	end
end

function isFaceUp(obj)
  local interactStatus = obj.interactable
  if(interactStatus == false) then obj.interactable = true end
	local r = obj.getRotation()
  obj.interactable = interactStatus

	if( (r.z > 355) or (r.z < 5) ) then
		return true
	else
		return false
	end
end

function flip(params)
  local obj = params.obj
  local obverse = params.obverse
	-- params: object to be flipped, obverse = boolean, whether to orient face up
	obverse = obverse or false -- default to right side up if obverse is not given

  local rotationVector = obj.getRotation()
	if(obverse) then
		rotationVector.z = 0
	else
    rotationVector.z = 180
	end
  obj.setRotation(rotationVector)
end

function getColorOrderCW(colorsInGame)
  -- TODO function to determine clockwise order of players in colorsInGame array

  -- temporary hard-coded version for now
  local defaultOrder = {'Purple', 'Green', 'Blue', 'White', 'Red'}
  local cwOrder, params = {}, {}
  params.table = colorsInGame

  local color
  for _, color in ipairs(defaultOrder) do
    params.searchValue = color
    if(inTable(params)) then table.insert(cwOrder, color) end
  end

  --log('getColorOrderCW')
  --log(cwOrder)
  return cwOrder
  --[[local color
  for _, color in ipairs(colorsInGame) do
    local handData = Player[color].getPlayerHand()
  end]]
end

function calculateSpawnVector(params)
  -- used to calculate spawning locations when given a snap point,
  -- offset (global location of object with attached snap points,
  -- and an additional height offset)
  local snapVector = params.snapVector
  local offsetVector = params.offsetVector
  local heightOffset = params.heightOffset

  local spawnVector = {}
  spawnVector.x = offsetVector.x - snapVector.position.x
  spawnVector.y = offsetVector.y - snapVector.position.y + heightOffset
  spawnVector.z = offsetVector.z - snapVector.position.z

  return spawnVector
end

function spawnScriptingZone(params)
  local positionVector = params.position
  local scale = params.scale

	spawnObject( {
		type = 'ScriptingTrigger',
		position =  positionVector,
		scale = scale
	} )
end

function guidsToObjects(params)
	-- take a indexed table of guids and return a table of corresponding objects
	local table = params.table
	local isIndexed = params.isIndexed
	local returnTable = {}

	if( table == nil ) then
		log('error guidsToObj_indexed: table is nil')
		return nil
	end

	if(isIndexed) then
		for _, guid in ipairs(table) do
			if( type(guid) ~= 'string' ) then
				log('error guidsToObj_indexed: guid is not a string')
			else
				returnTable.insert( getObjectFromGUID(guid) )
			end
		end
	else
		local key
		for key, guid in pairs(table) do
			if( type(guid) ~= 'string' ) then
				log('error guidsToObj_indexed: guid is not a string')
			else
				returnTable[key] = getObjectFromGUID(guid)
			end
		end
  end

	return returnTable
end

function setTableProps(params)
	-- iterate over a table of objects and set all properties
	local table = params.table
	local props = params.props
	local obj, prop, value

	for _, obj in pairs(table) do
		for prop, value in pairs(props) do
			obj[prop] = value
		end
	end
end

function positionAboveObject(params)
  local obj = params.object
  local returnVector = obj.getPosition()
  local bounds = obj.getBounds()
  local heightOffset = params.heightOffset or 0

  --returnVector[3] = returnVector[3] + (bounds.size.z) + heightOffset
  returnVector[2] = returnVector[2] + heightOffset
  returnVector.y = returnVector.y + heightOffset
  return returnVector
end